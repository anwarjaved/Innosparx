<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hiro.Containers</name>
    </assembly>
    <members>
        <member name="T:Hiro.Containers.Dependency">
            <summary>
            Represents a service dependency.
            </summary>
        </member>
        <member name="T:Hiro.Containers.IDependency">
            <summary>
            Represents a service dependency.
            </summary>
        </member>
        <member name="P:Hiro.Containers.IDependency.ServiceName">
            <summary>
            Gets the value indicating the name of the service itself.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:Hiro.Containers.IDependency.ServiceType">
            <summary>
            Gets a value indicating the service type.
            </summary>
            <value>The service type.</value>
        </member>
        <member name="M:Hiro.Containers.Dependency.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the Dependency class.
            </summary>
            <param name="serviceType">The service type.</param>
        </member>
        <member name="M:Hiro.Containers.Dependency.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the Dependency class.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="serviceName">The service name.</param>
        </member>
        <member name="M:Hiro.Containers.Dependency.GetHashCode">
            <summary>
            Computes the hash code using the <see cref="P:Hiro.Containers.Dependency.ServiceName"/> and <see cref="P:Hiro.Containers.Dependency.ServiceType"/>.
            </summary>
            <returns>The hash code value.</returns>
        </member>
        <member name="M:Hiro.Containers.Dependency.Equals(System.Object)">
            <summary>
            Determines whether or not the current object is equal to the <paramref name="obj">other object.</paramref>
            </summary>
            <param name="obj">The object that will be compared with the current object.</param>
            <returns><c>true</c> if the objects are equal; otherwise, it will return <c>false</c>.</returns>
        </member>
        <member name="M:Hiro.Containers.Dependency.ToString">
            <summary>
            Displays the dependency as a string.
            </summary>
            <returns>A string that displays the contents of the current dependency.</returns>
        </member>
        <member name="P:Hiro.Containers.Dependency.ServiceName">
            <summary>
            Gets the value indicating the name of the service itself.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:Hiro.Containers.Dependency.ServiceType">
            <summary>
            Gets a value indicating the service type.
            </summary>
            <value>The service type.</value>
        </member>
        <member name="T:Hiro.Containers.IFactory`1">
            <summary>
            Represents a factory type.
            </summary>
            <typeparam name="T">The type of object that will be created by the factory itself.</typeparam>
        </member>
        <member name="M:Hiro.Containers.IFactory`1.Create">
            <summary>
            Creates the given <typeparamref name="T"/> type.
            </summary>
            <returns>The <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="T:Hiro.Containers.IInitialize">
            <summary>
            Represents a type that is introduced to the <see cref="T:Hiro.Containers.IMicroContainer"/> instance upon initialization.
            </summary>
        </member>
        <member name="M:Hiro.Containers.IInitialize.Initialize(Hiro.Containers.IMicroContainer)">
            <summary>
            Initializes the current type with the given <paramref name="container"/> instance.
            </summary>
            <param name="container">The <see cref="T:Hiro.Containers.IMicroContainer"/> instance that instantiated the current t ype.</param>
        </member>
        <member name="T:Hiro.Containers.IMicroContainer">
            <summary>
            Represents the minimum amount of behavior necessary to implement a service container.
            </summary>
        </member>
        <member name="M:Hiro.Containers.IMicroContainer.Contains(System.Type,System.String)">
            <summary>
            Determines whether or not the container holds a particular service implementation.
            </summary>
            <param name="serviceType">The service type to be instantiated.</param>
            <param name="key">The name of the service itself.</param>
            <returns>A boolean value that specifies whether or not the service exists.</returns>
        </member>
        <member name="M:Hiro.Containers.IMicroContainer.GetAllInstances(System.Type)">
            <summary>
            Returns all object instances that match the given <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The service type to be instantiated.</param>
            <returns>A list of objects that match the given service type</returns>
        </member>
        <member name="M:Hiro.Containers.IMicroContainer.GetInstance(System.Type,System.String)">
            <summary>
            Obtains an object instance that matches the given <paramref name="serviceType"/>
            and <paramref name="key">service name</paramref>.
            </summary>
            <param name="serviceType">The service type to be instantiated.</param>
            <param name="key">The name of the service itself.</param>
            <returns>An object instance that matches the given service description.</returns>
        </member>
        <member name="P:Hiro.Containers.IMicroContainer.NextContainer">
            <summary>
            Gets or sets the value indicating the <see cref="T:Hiro.Containers.IMicroContainer"/> instance that will be added to the current container chain.
            </summary>
            <value>The next container.</value>
        </member>
        <member name="T:Hiro.Containers.IContainerPlugin">
            <summary>
            Represents a type that can extend a <see cref="T:Hiro.Containers.IMicroContainer"/> type.
            </summary>
        </member>
        <member name="T:Hiro.Containers.ServiceNotFoundException">
            <summary>
            Represents the exception thrown when a particular service cannot be resolved by a <see cref="T:Hiro.Containers.IMicroContainer"/> instance.
            </summary>
        </member>
        <member name="M:Hiro.Containers.ServiceNotFoundException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Hiro.Containers.ServiceNotFoundException"/> class.
            </summary>
            <param name="serviceName">The service name.</param>
            <param name="serviceType">The service type.</param>
        </member>
        <member name="P:Hiro.Containers.ServiceNotFoundException.ServiceName">
            <summary>
            Gets the value of the service name.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:Hiro.Containers.ServiceNotFoundException.ServiceType">
            <summary>
            Gets the value of the service type.
            </summary>
            <value>The service type.</value>
        </member>
    </members>
</doc>
